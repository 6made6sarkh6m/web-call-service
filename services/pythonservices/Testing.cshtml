@{
    Layout = null;
}
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width">
    <script src="~/src/jquery-3.4.1.min.js"></script>

    <style>

        #frm > input[type=text], select {
            width: 100%;
            padding: 12px 20px;
            margin: 8px 0;
            display: inline-block;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
        }

        #frm > input[type=submit] {
            width: 100%;
            background-color: #4CAF50;
            color: white;
            padding: 14px 20px;
            margin: 8px 0;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

            #frm > input[type=submit]:hover {
                background-color: #45a049;
            }

        #frm > div {
            border-radius: 5px;
            background-color: #f2f2f2;
            padding: 20px;
        }

        button {
            margin: 0 3px 10px 0;
            padding-left: 2px;
            padding-right: 2px;
            width: 99px;
        }

            button:last-of-type {
                margin: 0;
            }

        p.borderBelow {
            margin: 0 0 20px 0;
            padding: 0 0 20px 0;
        }


            video#gumVideo {
                margin: 10px;
            }
        
    </style>
</head>
<body>
    <div id="container">

      
        <div id="frm">
            <label for="fname">ФИО</label>
            <input type="text" id="txtname" name="firstname" placeholder="Введите ФИО..">
        </div>

        <div id="container_1">
            <div class="inner" style="display: flex; justify-content: center;">
                <video id="gum" autoplay muted></video>
                <video id="recorded" style="display:none;" controls></video>
            </div>
            <div style="display: flex; justify-content: center; margin-top: 10px;">
                <button id="record" disabled>Start Recording</button>
            </div>
        </div>
    </div>
    <script>
        


        if (typeof (WebSocket) !== 'undefined') {
            socket = new WebSocket("wss://nii-it.kz:2528/face_recognition/handler");
            console.log(socket);
        }
        else {
            socket = new WebSocket("ws://localhost:44307/handler");
            console.log(socket);
        }

        socket.onclose = function (event) {
            if (event.wasClean) {
                console.log(`[close] Соединение закрыто чисто, код=${event.code} причина=${event.reason}`);
            }
            else {
                console.log('[close] Соединение прервано');
            }
        };  

        socket.onerror = function (error) {
            console.log(`[error] ${error.message}`);
        };

        var mediaRecorder;
        var recordedBlobs;

        var gumVideo = document.querySelector('video#gum');
        var recordedVideo = document.querySelector('video#recorded');

        var recordButton = document.querySelector('button#record');
 
        recordButton.onclick = toggleRecording;
 

        navigator.mediaDevices.getUserMedia({ audio: true, video: true })
            .then((stream) => {
                recordButton.disabled = false;
                console.log('getUserMedia() got stream: ', stream);
                window.stream = stream;
                gumVideo.srcObject = stream;
            })
            .catch((error) => {
                console.log('navigator.getUserMedia error: ', error);
            });

        // push blob
        function handleDataAvailable(event) {
            if (event.data && event.data.size > 0) {
                recordedBlobs.push(event.data);
            }
        }


        function handleStop(event) {
            recordButton.style.display = "block";
            recordButton.textContent = 'Start Recording';
            console.log('Recorder stopped: ', event);
        }


        //start or stop check
        function toggleRecording() {
            if (recordButton.textContent === 'Start Recording') {
                startRecording();
            }
            else {
                stopRecording();
                recordButton.textContent = 'Start Recording';
                playButton.disabled = false;
                downloadButton.disabled = false;
            }
        }


        function getScreenshot(videoEl, scale) {
            scale = scale || 1;

            const canvas = document.createElement("canvas");
            canvas.width = videoEl.clientWidth * scale;
            canvas.height = videoEl.clientHeight * scale;
            canvas.getContext('2d').drawImage(videoEl, 0, 0, canvas.width, canvas.height);

            return canvas.toDataURL();
        }


        function startRecording() {
            recordedBlobs = [];

              var student_name = $("#txtname").val();
              console.log(student_name);
              socket.send(student_name);

            try {
                mediaRecorder = new MediaRecorder(window.stream);
            } catch (e) {
                console.error('Exception while creating MediaRecorder: ' + e);
                return;
            }
            console.log('Created MediaRecorder', mediaRecorder);
            recordButton.textContent = 'Stop Recording';
            mediaRecorder.onstop = handleStop;
            mediaRecorder.ondataavailable = handleDataAvailable;
            mediaRecorder.start(10);
            console.log('MediaRecorder started', mediaRecorder);
            recordButton.style.display = "none";

            // every 5 sec send screenshot
            var intervalFunc = setInterval(takeSnapshot, 5000);
            
            function takeSnapshot() {
                var dataURL = getScreenshot(document.getElementById('gum'), 1);
                fetch(dataURL)
                    .then(res => { return res.blob() }).then(blob => {
                        console.log(blob);
                        var rawData = new ArrayBuffer();
                        rawData = blob;
                        socket.send(rawData);
                    });
            }

            // stop video after 15 sec
            setTimeout(function () {
                stopRecording();
                clearInterval(intervalFunc);
            }, 15000);

        }


        function stopRecording() {
            mediaRecorder.stop();
            console.log('Recorded Blobs: ', recordedBlobs);
            recordedVideo.controls = true;
            recordedBlobs = new Blob(recordedBlobs, { type: 'video/webm' });
        }

    </script>
</body>
</html>